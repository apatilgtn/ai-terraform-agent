# docker-compose.override.yml
# Development overrides for Docker Compose
# This file is automatically loaded by docker-compose in addition to docker-compose.yml

version: '3.8'

services:
  terraform-agent:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      # Mount source code for hot-reload
      - .:/app:cached
      # Preserve virtual environment and node_modules
      - /app/venv
      - /app/.cache
      # Mount logs directory
      - ./logs:/app/logs
    environment:
      # Development environment variables
      - LOG_LEVEL=DEBUG
      - RELOAD=true
      - ENVIRONMENT=development
      # Enable debugging
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    ports:
      - "8000:8000"
      - "5678:5678"  # debugpy port
      - "8888:8888"  # Jupyter port (if needed)
    command: >
      bash -c "
        echo 'Starting development server...' &&
        uvicorn main:app 
          --host 0.0.0.0 
          --port 8000 
          --reload 
          --log-level debug
          --reload-dir /app
          --reload-exclude '*.pyc'
          --reload-exclude '__pycache__'
          --reload-exclude 'logs/*'
          --reload-exclude 'terraform_output/*'
      "
    depends_on:
      - redis
      - postgres
    networks:
      - dev-network

  # Development Redis for caching and sessions
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes --appendfsync everysec
    networks:
      - dev-network

  # Development PostgreSQL for storing metadata
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: terraform_agent_dev
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/db-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - dev-network

  # Development tools
  adminer:
    image: adminer:4-standalone
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - dev-network

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: "local:redis:6379"
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - dev-network

  # Prometheus for development monitoring
  prometheus-dev:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_dev_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - dev-network

  # Grafana for development dashboards
  grafana-dev:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/dashboard.json:ro
    depends_on:
      - prometheus-dev
    networks:
      - dev-network

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - dev-network

volumes:
  redis_dev_data:
    driver: local
  postgres_dev_data:
    driver: local
  prometheus_dev_data:
    driver: local
  grafana_dev_data:
    driver: local

networks:
  dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
